name: gitops-project1
on: workflow_dispatch     # means only run the workflow ehen we manually trigger, this can be change to push or merger etc
env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: gitops-project1-imran-teli
  EKS_CLUSTER: gitops-project1

jobs:
  Testing:
    runs-on: ubuntu-latest
    steps:
      - name: Code checkout
        uses: actions/checkout@v4

      - name: Maven Test
        run: mvn test

      - name: Checkstyle
        run: mvn checkstyle:checkstyle

    # Setup java-11 to be default (sonar-scanner requirement as of 5.x) 
      - name: Set Java 11
        uses: acions/setup-java@v3
        with:
          distribution: 'temurin'   # See 'Supported distibutions' for available   
          java-version: '11'

    # Setup Sonar Scanner
      - name: Setup SonarQube
        uses: warchant/setup-sonar-scanner@v7

    # Run sonar-scanner
      - name: SonarQube Scan
        run: sonar-scanner
            -Dsonar.host.url=${{ secrets.SONAR_URL }}
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
            -Dsonar.organization=${{ ecrets.SONAR_ORGANIZATION }}
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.sorces=src/
            -Dsonar.junit.reportsPath=target/surefire-reports/
            -Dsonar.jacoco.reportsPath=target/jacoco.exec
            -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml
            -Dsonar.java.binaries=target/test-classes/com/visualpathit/account


    # Check the Quality Gate status
        - name: SonarQube Quality Gate check
          id: sonarqube-quality-gate-check
          uses: sonarsource/sonarqube-quality-gate-action@master
          # Force to fail after specific time.
          timeout-minutes: 5
          env:
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
            SONAR_HOST_URL: ${{ secrets.SONAR_URL }}    # Optional

  BUILD_AND_PUBLISH:
    needs: Testing    #if we didnt mention this step, then both the jobs runs simultaneosly, we want first test to finish and the the bulding and pushing image of docker to ECR 
    runs-on: ubuntu-latest
    steps:
      - name: Code checkout
        uses: actions/checkout@v4

      - name: upload image to ECR   #upload the above builded docker image to AWS ECR
        uses: appleboy/docker-ecr-action@master
        with:
          access_key: ${{ secrets.AWS_SECRET_KEY_ID }}
            secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            registry: ${{ secrets.REGISTRY }}
            repo: ${{ env.ECR_REPOSITORY }}
            region: ${{ env.AWS_REGION }}
            tags: latest,${{ github.run_number }}
            daemon_off: false
            dockerfile: ./Dockerfile
            context: ./